# ===================================
# Development Dockerfile for BRK Backend
# ===================================

FROM node:20-alpine

# Install dumb-init for proper signal handling and development tools
RUN apk add --no-cache dumb-init wget curl

# Create non-root user for development
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Set environment variables
ENV NODE_ENV=development
ENV PORT=3000
ENV NPM_CONFIG_LOGLEVEL=info

# Copy package files and install dependencies
COPY --chown=nodejs:nodejs package*.json ./

# Install all dependencies (including devDependencies)
RUN npm ci --include=dev --no-audit --no-fund

# Copy source code and configuration files
COPY --chown=nodejs:nodejs . .

# Create directories that might be needed
RUN mkdir -p /tmp/uploads && \
    mkdir -p /app/logs && \
    chown -R nodejs:nodejs /tmp/uploads /app/logs

# Switch to non-root user
USER nodejs

# Expose application port and debug port
EXPOSE 3000 9229

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Default command (can be overridden in docker-compose)
CMD ["npm", "run", "dev"] 