version: '3.8'

services:
  # ===================================
  # PostgreSQL Database (Development)
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: brk-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-brk_competition_dev}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - brk-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-brk_competition_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===================================
  # Redis Cache (Development)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: brk-redis-dev
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --appendonly no
      --save ""
    volumes:
      - redis_dev_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - brk-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ===================================
  # BRK Backend Application (Development)
  # ===================================
  brk-backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: brk-backend-dev
    restart: unless-stopped
    environment:
      # Application Configuration
      NODE_ENV: development
      PORT: ${PORT:-3000}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-brk_competition_dev}
      DB_SSL: false
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: ${REDIS_DB:-0}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-1h}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
      
      # Email Configuration (Development)
      BREVO_API_KEY: ${BREVO_API_KEY:-your-brevo-api-key}
      BREVO_SENDER_EMAIL: ${BREVO_SENDER_EMAIL:-dev@brasilrentalkarts.com.br}
      BREVO_SENDER_NAME: ${BREVO_SENDER_NAME:-[DEV] Brasil Rental Karts}
      
      # Frontend Configuration
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173,http://localhost:5174}
      PASSWORD_RESET_PATH: ${PASSWORD_RESET_PATH:-/reset-password}
      EMAIL_CONFIRMATION_PATH: ${EMAIL_CONFIRMATION_PATH:-/confirm-email}
      
      # Google OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:3000/auth/google/callback}
      
      # Cookie Configuration
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-localhost}
      COOKIE_SECURE: false
      COOKIE_SAMESITE: lax
      
      # Security Configuration (Relaxed for development)
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:5174}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-300000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-1000}
      
    volumes:
      # Enable hot reload
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./typeorm-migration.config.ts:/app/typeorm-migration.config.ts:ro
      - ./typeorm.config.ts:/app/typeorm.config.ts:ro
      - /app/node_modules
    ports:
      - "${PORT:-3000}:3000"
      - "9229:9229" # Debug port
    networks:
      - brk-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: npm run dev

# ===================================
# Development Volumes
# ===================================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

# ===================================
# Development Network
# ===================================
networks:
  brk-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 