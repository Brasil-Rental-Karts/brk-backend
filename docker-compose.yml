version: '3.8'

services:
  # ===================================
  # PostgreSQL Database
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: brk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-brk_competition}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - brk-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-brk_competition}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ===================================
  # Redis Cache
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: brk-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - brk-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  # ===================================
  # BRK Backend Application
  # ===================================
  brk-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    container_name: brk-backend
    restart: unless-stopped
    environment:
      # Application Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-brk_competition}
      DB_SSL: ${DB_SSL:-false}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: ${REDIS_DB:-0}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret-replace-in-production}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-15m}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
      
      # Email Configuration (Brevo/Sendinblue)
      BREVO_API_KEY: ${BREVO_API_KEY:-your-brevo-api-key}
      BREVO_SENDER_EMAIL: ${BREVO_SENDER_EMAIL:-noreply@brasilrentalkarts.com.br}
      BREVO_SENDER_NAME: ${BREVO_SENDER_NAME:-Brasil Rental Karts}
      
      # Frontend Configuration
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173,http://localhost:5174}
      PASSWORD_RESET_PATH: ${PASSWORD_RESET_PATH:-/reset-password}
      EMAIL_CONFIRMATION_PATH: ${EMAIL_CONFIRMATION_PATH:-/confirm-email}
      
      # Google OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:3000/auth/google/callback}
      
      # Cookie Configuration
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-localhost}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      COOKIE_SAMESITE: ${COOKIE_SAMESITE:-lax}
      
      # Security Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:5174}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
    ports:
      - "${PORT:-3000}:3000"
    networks:
      - brk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Nginx Reverse Proxy (Optional)
  # ===================================
  nginx:
    image: nginx:1.25-alpine
    container_name: brk-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - brk-network
    depends_on:
      - brk-backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    profiles:
      - nginx
      - production

# ===================================
# Named Volumes
# ===================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  nginx_logs:
    driver: local

# ===================================
# Networks
# ===================================
networks:
  brk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: brk-bridge 